name: build

on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    
env:
  FLUTTER_VERSION: '2.10.5' 

jobs:
  build-macos:
    runs-on: macos-latest
    env:
      MACOS_APP_RELEASE_PATH: build/macos/Build/Products/Release
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: 'stable'
          cache: true
          architecture: x64
      - run: flutter pub get
      - run: flutter pub run build_runner build
      - run: flutter config --enable-macos-desktop
      - name: Install app dmg
        run: npm install -g appdmg
      - name: Create dmg
        run: flutter pub run flutter_distributor:main package --platform macos --targets dmg
      - name: Upload MacOS artifact
        uses: actions/upload-artifact@v3
        with:
          name: ac_companion-macos
          path: "dist/**/*.dmg"
  build-windows:
    runs-on: windows-latest
    env:
      WINDOWS_APP_RELEASE_PATH: build/windows/runner/Release
    steps:
      - uses: actions/checkout@v3
      - uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{env.FLUTTER_VERSION}}
          channel: 'stable'
          cache: true
          architecture: x64
      - run: flutter pub get
      - run: flutter pub run build_runner build
      - run: flutter config --enable-windows-desktop
      - name: Create msix
        run: flutter pub run flutter_distributor:main package --platform windows --targets msix
      - name: Upload windows artifact
        uses: actions/upload-artifact@v3
        with:
          name: ac_companion-windows
          path: "dist/**/*.msix"
  release:
    name: Release
    needs: [build-macos, build-windows]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Create Version Number
        id: versions
        run: |
          git fetch
          VERSION_WITHOUT_SUFFIX="$(grep 'version:' pubspec.yaml | awk '{ print $2 }' | cut -d'+' -f 1)"
          function parse_git_hash() {
            git rev-list --count origin/main
          }
          MAIN_COUNT=$(parse_git_hash)
          APP_VERSION="$VERSION_WITHOUT_SUFFIX+$MAIN_COUNT"
          echo "::set-output name=version::$(echo $APP_VERSION)"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.versions.outputs.version }}
          release_name: Release ${{ steps.versions.outputs.version }}
          body: |
             Release Notes
          draft: false
          prerelease: false
      - name: Download dmg
        uses: actions/download-artifact@v3
        with:
          name: ac_companion-macos
      - name: Upload MacOS Asset
        id: upload-release-asset-macos
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./*.dmg"
          asset_name: "appcenter_companion-${{ steps.versions.outputs.version }}-macos.dmg"
          asset_content_type: application/octet-stream
      - name: Download exe
        uses: actions/download-artifact@v3
        with:
          name: ac_companion-windows
      - name: Upload Windows Asset
        id: upload-release-asset-windows
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: "./*.msix"
          asset_name: "appcenter_companion-${{ steps.versions.outputs.version }}-windows.msix"
          asset_content_type: application/octet-stream
